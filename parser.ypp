%{
#include <stdio.h>
#include <string>
#include <iostream>

#include "ast.hpp"
#include "symbols.hpp"

using namespace std;

extern int lineNumber;

int yylex();
void yyerror(string msg);
int getLineNumber();
AST* head;


%}

%union {
  AST *ast;
  SYMBOL *symbol;
}

%token KW_BYTE
%token KW_INT
%token KW_REAL

%token KW_IF
%token KW_ELSE
%token KW_DO
%token KW_WHILE
%token KW_READ
%token KW_PRINT
%token KW_RETURN

%token OPERATOR_LE
%token OPERATOR_GE
%token OPERATOR_EQ
%token OPERATOR_DIF

%token<symbol> TK_IDENTIFIER
%token<symbol> LIT_INT
%token<symbol> LIT_CHAR
%token<symbol> LIT_REAL
%token<symbol> LIT_STRING
%token TOKEN_ERROR

%type<ast> expr functionArgs restFunctionArgs printel printlst cmd flux attb types literal cmdl restcmdl cmdblock argl arg argsrest function initvarl restvarl variables dec decl program

%start program

%left '|'
%left '&'
%left '+' '-'
%left '*' '/'
%left OPERATOR_EQ OPERATOR_DIF
%left '<' '>' OPERATOR_GE OPERATOR_LE
%left '~'

%nonassoc PREC_IF 
%nonassoc KW_ELSE
%nonassoc PREC_TOK_ID
%nonassoc '['
%nonassoc '('

%%

program: decl                               { head = new AST(AST_PROGRAM, {$1}); }
      ;

decl: dec decl                              { $$ = new AST(AST_DECL, {$1, $2}); }
    |                                       { $$ = NULL; }
    ;

dec: variables                              { $$ = $1; }
   | function                               { $$ = $1; }
   | cmdblock
   ;

// *********************************************************************

types: KW_BYTE                              { $$ = new AST(AST_BYTE, {}); }
     | KW_INT                               { $$ = new AST(AST_INT, {}); }
     | KW_REAL                              { $$ = new AST(AST_REAL, {}); }
     ;

literal: LIT_CHAR                           { $$ = new AST(AST_SYMBOL_LIT, {}, $1); }
    | LIT_INT                               { $$ = new AST(AST_SYMBOL_LIT, {}, $1); }
    | LIT_REAL                              { $$ = new AST(AST_SYMBOL_LIT, {}, $1); }
    ;

// *********************************************************************

variables: types TK_IDENTIFIER '=' literal ';'                     { $$ = new AST(AST_VARIABLES, {$1, $4}, $2); }
         | types TK_IDENTIFIER '[' literal ']' initvarl ';'        { $$ = new AST(AST_VARIABLES_VEC, {$1, $4, $6}, $2); }
         ;


initvarl: '=' literal restvarl              { $$ = new AST(AST_VARIABLES_ARG, {$2, $3}); }
         |                                  { $$ = NULL; }
         ;

restvarl: ',' literal restvarl              { $$ = new AST(AST_VARIABLES_ARG, {$2, $3}); }
         |                                  { $$ = NULL; }
         ;

// *********************************************************************


function: types TK_IDENTIFIER '(' argl ')' cmdblock  { $$ = new AST(AST_FUNCTION, {$1, $4, $6}, $2); }
       ;

argl: arg argsrest                          { $$ = new AST(AST_FUNCTION_ARGS, {$1, $2}); }
   |                                        { $$ = NULL; }
   ;

arg: types TK_IDENTIFIER                    { $$ = new AST(AST_FUNCTION_ARG, {$1}, $2); }
   ;

argsrest: ',' arg argsrest                  { $$ = new AST(AST_FUNCTION_ARGS, {$2, $3}); }
        |                                   { $$ = NULL; }
        ;

// *********************************************************************

cmdblock: '{' cmdl '}'                      { $$ = new AST(AST_CMDBLK, {$2}); }
      | '{' '}'                             { $$ = new AST(AST_EMPTY_CMDBLK, {}); }
      ;

cmdl: cmd restcmdl                          { $$ = new AST(AST_CMDL, {$1, $2}); }
    ;

restcmdl: cmdl                              { $$ = $1; }
        |                                   { $$ = NULL; }
        ;

cmd: attb ';'                               { $$ = $1; }
   | flux                                   { $$ = $1; }
   | KW_READ TK_IDENTIFIER ';'              { $$ = new AST(AST_READ, {}, $2); }
   | KW_PRINT printel printlst ';'          { $$ = new AST(AST_PRINT, {$2, $3}); }
   | KW_RETURN expr ';'                     { $$ = new AST(AST_RETURN, {$2}); }
   | ';'                                    { $$ = new AST(AST_EMPTY_CMD, {}); }
   | cmdblock                               { $$ = $1; }
   ;

// *********************************************************************


attb: TK_IDENTIFIER '=' expr                { $$ = new AST(AST_ATTB, {$3}, $1); }
    | TK_IDENTIFIER '[' expr ']' '=' expr   { $$ = new AST(AST_ATTB_VEC, {$3, $6}, $1); }
    ;

flux: KW_IF '(' expr ')' cmd %prec PREC_IF  { $$ = new AST(AST_IF, {$3, $5}); }
    | KW_IF '(' expr ')' cmd KW_ELSE cmd    { $$ = new AST(AST_IF_ELSE, {$3, $5, $7}); }
    | KW_WHILE expr KW_DO cmd               { $$ = new AST(AST_WHILE, {$2, $4}); }
    | KW_DO cmd KW_WHILE expr ';'           { $$ = new AST(AST_DO_WHILE, {$2, $4}); }
    ;

printel: LIT_STRING                         { $$ = new AST(AST_STRING, {}, $1); }
       | expr                               { $$ = $1; }
       ;

printlst: printel printlst                  { $$ = new AST(AST_PRINT_REST, {$1,$2}); }
         |                                  { $$ = NULL; }
         ;
  
// *********************************************************************


expr: expr '+' expr			                { $$ = new AST(AST_ADD, {$1, $3}); }
    | expr '-' expr			                { $$ = new AST(AST_SUB, {$1, $3}); }
    | expr '*' expr			                { $$ = new AST(AST_MUL, {$1, $3}); }
    | expr '/' expr			                { $$ = new AST(AST_DIV, {$1, $3}); }
    | expr '<' expr			                { $$ = new AST(AST_LSR, {$1, $3}); }
    | expr '>' expr			                { $$ = new AST(AST_GTR, {$1, $3}); }
    | expr OPERATOR_LE expr		            { $$ = new AST(AST_LE, {$1, $3}); }
    | expr OPERATOR_GE expr		            { $$ = new AST(AST_GE, {$1, $3}); }
    | expr OPERATOR_EQ expr		            { $$ = new AST(AST_EQ, {$1, $3}); }
    | expr OPERATOR_DIF expr	            { $$ = new AST(AST_DIF, {$1, $3}); }
    | expr '&' expr                         { $$ = new AST(AST_AND, {$1, $3}); }
    | expr '|' expr			                { $$ = new AST(AST_OR, {$1, $3}); }
    | expr '~' expr			                { $$ = new AST(AST_NOT, {$1, $3}); }
    | literal				                { $$ = new AST(AST_LIT, {$1}); }
    | TK_IDENTIFIER	%prec PREC_TOK_ID       { $$ = new AST(AST_SYMBOL_ID, {}, $1); }
    | TK_IDENTIFIER '[' expr ']'            { $$ = new AST(AST_SYMBOL_VEC, {$3}, $1); }
    | '(' expr ')'                          { $$ = new AST(AST_PRTSS, {$2}); }
    | TK_IDENTIFIER '(' functionArgs ')'    { $$ = new AST(AST_SYMBOL_FUNCTION, {$3}, $1); }
    | TK_IDENTIFIER '(' ')'                 { $$ = new AST(AST_SYMBOL_FUNCTION, {}, $1); }
    ;

functionArgs: expr restFunctionArgs         { $$ = new AST(AST_SYMBOL_FUNCTION_ARGS, {$1, $2}); }
        ;

restFunctionArgs: ',' functionArgs          { $$ = $2; }
            |                               { $$ = NULL; }
            ;

// *********************************************************************

%%

void yyerror(string msg) {
  fprintf(stderr, "syntax error at line %d !!\n", getLineNumber());
  exit(3);
}

